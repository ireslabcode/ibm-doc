/*
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package cclms.impl;

import cclms.*;

import ilog.odm.dom.IloDomCollector;
import ilog.odm.dom.IloDomFactory;
import ilog.odm.dom.IloDomObject;

import ilog.odm.dom.impl.IloDomFactoryImpl;

import java.sql.Date;

import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CclmsFactoryImpl extends IloDomFactoryImpl implements
		CclmsFactory, IloDomFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static CclmsFactory init() {
		try {
			CclmsFactory theCclmsFactory = (CclmsFactory) EPackage.Registry.INSTANCE
					.getEFactory("http://www.ibm.com/cclms/1.0.0");
			if (theCclmsFactory != null) {
				return theCclmsFactory;
			}
		} catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new CclmsFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CclmsFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
		case CclmsPackage.ZONE_MST:
			return (EObject) createZoneMst();
		case CclmsPackage.STATION_MST:
			return (EObject) createStationMst();
		case CclmsPackage.TRAIN_FREQUENCY_MST:
			return (EObject) createTrainFrequencyMst();
		case CclmsPackage.TRACTION_MST:
			return (EObject) createTractionMst();
		case CclmsPackage.TRAIN_MST:
			return (EObject) createTrainMst();
		case CclmsPackage.CCLMS_COLLECTOR:
			return (EObject) createCclmsCollector();
		case CclmsPackage.ILOG_ODM_DOM_ILO_DOM_COLLECTOR:
			return (EObject) createilog_odm_dom_IloDomCollector();
		default:
			throw new IllegalArgumentException("The class '" + eClass.getName()
					+ "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
		case CclmsPackage.LIST:
			return createListFromString(eDataType, initialValue);
		case CclmsPackage.JAVA_SQL_DATE:
			return createjava_sql_DateFromString(eDataType, initialValue);
		default:
			throw new IllegalArgumentException("The datatype '"
					+ eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
		case CclmsPackage.LIST:
			return convertListToString(eDataType, instanceValue);
		case CclmsPackage.JAVA_SQL_DATE:
			return convertjava_sql_DateToString(eDataType, instanceValue);
		default:
			throw new IllegalArgumentException("The datatype '"
					+ eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ZoneMst createZoneMst() {

		ZoneMstImpl zoneMst = new ZoneMstImpl();
		return zoneMst;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StationMst createStationMst() {

		StationMstImpl stationMst = new StationMstImpl();
		return stationMst;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TrainFrequencyMst createTrainFrequencyMst() {

		TrainFrequencyMstImpl trainFrequencyMst = new TrainFrequencyMstImpl();
		return trainFrequencyMst;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TractionMst createTractionMst() {

		TractionMstImpl tractionMst = new TractionMstImpl();
		return tractionMst;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TrainMst createTrainMst() {

		TrainMstImpl trainMst = new TrainMstImpl();
		return trainMst;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CclmsCollector createCclmsCollector() {

		CclmsCollectorImpl cclmsCollector = new CclmsCollectorImpl();
		return cclmsCollector;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IloDomCollector createilog_odm_dom_IloDomCollector() {

		throw new ilog.odm.dom.IloDomInstantiationException(
				"ilog_odm_dom_IloDomCollectorImpl");
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<?> createListFromString(EDataType eDataType, String initialValue) {
		return (List<?>) super.createFromString(initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertListToString(EDataType eDataType, Object instanceValue) {
		return super.convertToString(instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Date createjava_sql_DateFromString(EDataType eDataType,
			String initialValue) {
		return (Date) super.createFromString(eDataType, initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertjava_sql_DateToString(EDataType eDataType,
			Object instanceValue) {
		return super.convertToString(eDataType, instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CclmsPackage getCclmsPackage() {
		return (CclmsPackage) getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static CclmsPackage getPackage() {
		return CclmsPackage.eINSTANCE;
	}

	/**
	 * Bridge the ODME DOM factory to the EMF factory
	 * @generated
	 */
	public final IloDomObject createObject(Class<? extends IloDomObject> entity) {
		EClassifier c = CclmsPackage.eINSTANCE.getEClassifier(entity
				.getSimpleName());
		if (c != null && c instanceof EClass)
			return (IloDomObject) create((EClass) c);
		return null;
	}

} //CclmsFactoryImpl
