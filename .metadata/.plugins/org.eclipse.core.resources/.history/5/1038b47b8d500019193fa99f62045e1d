package test;

import ilog.odm.datasvc.IloDataException;
import ilog.odm.datasvc.IloDataService;
import ilog.odm.datasvc.IloLock;
import ilog.odm.datasvc.IloLockable;
import ilog.odm.datasvc.IloScenario;
import ilog.odm.datasvc.IloScenarioLink;
import ilog.odm.datasvc.IloWorkspace;
import ilog.odm.datasvc.IloWorkspaceFolder;
import ilog.odm.datasvc.IloWorkspaceItem;
import ilog.odm.processingsvc.IloExecutionScope;
import ilog.odm.processingsvc.IloSolveTaskController;
import ilog.odm.processingsvc.scenario.IloScenarioProcessingService;
import ilog.odm.service.IloApplicationContext;
import ilog.odm.studio.views.IloODMApplication;
import ilog.odm.studio.workspacesvc.IloWorkspaceService;
import ilog.odm.tasksvc.IloProgressMonitor;
import ilog.odm.tasksvc.IloTask;
import ilog.odm.tasksvc.IloTaskService;

import java.util.ArrayList;

public class ScenarioUtil {

  public static void changeCurrentScenario(IloApplicationContext context, IloScenarioLink scenarioLink) {
    IloWorkspaceService workspaceService = context.getService(IloWorkspaceService.class);
    workspaceService.setKeyScenarioLink(IloWorkspaceService.CURRENT_KEY, scenarioLink);
    workspaceService.clearTag(IloWorkspaceService.SELECTED_TAG);
    workspaceService.addTag(scenarioLink, IloWorkspaceService.SELECTED_TAG);
  }

  public static void changeReferenceScenario(IloApplicationContext context, IloScenarioLink scenarioLink) {
    IloWorkspaceService workspaceService = context.getService(IloWorkspaceService.class);
    workspaceService.setKeyScenarioLink(IloWorkspaceService.REFERENCE_KEY, scenarioLink);
  }

  //--------------------
  // Solving Multiple
  //--------------------

  // run all the scenarios given
  // allows control on the Solve Progress Window
  public static void runMultipleOptimizers(final IloODMApplication appli, final ArrayList<IloScenarioLink> links,
      final boolean checkData, final boolean withSolveProgressWindowOpened) {
    if (!withSolveProgressWindowOpened) {
      // Unselecting the scenario prevents the Solve Progress Window to pop
      appli.getScenarioSelectionInteractor().changeCurrentScenario(null);
    }
    appli.getService(IloTaskService.class).submit(new IloTask("Optimizing Multiple Scenarios") {
      @Override
      public void run(IloProgressMonitor monitor) {
        monitor.begin(links.size());
        for (IloScenarioLink link : links) {
          if (withSolveProgressWindowOpened) {
            // To have the Solve Progress Window updated for this scenario, you need to select the corresponding link
            appli.getScenarioSelectionInteractor().changeCurrentScenario(link);
          }
          runOptimizer(link.getScenario(), appli, checkData, withSolveProgressWindowOpened, monitor);
        }
        monitor.done();
      }
    });
  }

  // run all the given scenarios and do not wait for completion
  public static void runMultipleOptimizersNoWaiting(final IloApplicationContext context,
      final ArrayList<IloScenarioLink> links, final boolean checkData, IloProgressMonitor monitor) {
    for (IloScenarioLink link : links) {
      runOptimizer(link.getScenario(), context, checkData, false, monitor);
    }
  }

  // run all the given scenarios and wait for completion
  public static void runMultipleOptimizersAndWait(final IloApplicationContext context,
      final ArrayList<IloScenarioLink> links, final boolean checkData, IloProgressMonitor monitor) {
    for (IloScenarioLink link : links) {
      runOptimizer(link.getScenario(), context, checkData, true, monitor);
    }
  }

  //--------------------
  // Solving One
  //--------------------

  // monitor can be null
  public static void runOptimizer(IloScenario scenario, IloODMApplication appli, boolean checkData,
      boolean withSolveProgressWindowOpened, IloProgressMonitor monitor) {
    if (!withSolveProgressWindowOpened) {
      // Unselecting the scenario prevents the Solve Progress Window to pop
      appli.getScenarioSelectionInteractor().changeCurrentScenario(null);
    }
    ScenarioUtil.runOptimizer(scenario, appli, true, withSolveProgressWindowOpened, monitor);
  }

  // monitor can be null
  public static void runOptimizer(IloScenario scenario, IloApplicationContext context, boolean checkData,
      boolean waitForCompletion, IloProgressMonitor monitor) {
    IloDataService dataService = context.getService(IloDataService.class);
    IloScenarioProcessingService processingService = context.getService(IloScenarioProcessingService.class);
    IloLock scLock = null;
    try {
      if (monitor != null) {
        monitor.setMessage("Optimizing " + scenario.getName());
        monitor.worked(1);
      }
      // Check data before solve
      boolean checkOk = true;
      if (checkData) {
        scLock = scenario.addLock(IloLockable.EXCLUSIVE_WRITE_LOCK);
        checkOk = dataService.checkData(scenario);
        scenario.removeLock(scLock);
        scLock = null;
      }
      if (checkOk) {
        // Solve
        IloExecutionScope scope = processingService.newScope(scenario);
        IloSolveTaskController solveTask = (IloSolveTaskController) processingService.newTask(processingService
            .getConfiguration().getDefaultTask(), scope);
        // Prepare a solve: set a timeout
        solveTask.getInputOutput().setTimeLimit(60000);

        // Submit the solve operation. Notice that this call is the same whether the
        // solve is performed on the optimization server or locally: this is only a deployment
        // decision, transparent for the API.
        processingService.submitTask(solveTask);

        // Wait for the completion of the job
        // Mandatory when we want to see the Progress Window
        if (waitForCompletion) {
          boolean solveNotOver = true;
          while (solveNotOver) {
            try {
              solveTask.waitForCompletion(1000);
              solveNotOver = false;
              System.out.println("finished...");
            } catch (InterruptedException e) {
              System.out.println("waiting...");
              solveNotOver = true; // solve is not over
              scenario.refreshLocks();
            }
          }
          //          solveTask.waitForCompletion(-1);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      if (scLock != null) scenario.removeLock(scLock);
      if (monitor != null) {
        monitor.worked(1);
      }
    }
  }

  //--------------------
  // Scenario management
  //--------------------

  /** 
   * Name must be unique in folder (see getUniqueName function)
   * @param dataService
   * @param folder
   * @param name
   * @return
   */
  public static IloScenarioLink createScenario(IloDataService dataService, IloWorkspaceFolder folder, String name) {
    // Create a scenario
    IloScenarioLink link = null;
    IloScenario scenario = null;
    IloLock scLock = null;
    try {
      // duplicate reference
      link = folder.createChildScenario(-1);
      scenario = link.getScenario();
      scLock = scenario.addLock(IloLockable.EXCLUSIVE_WRITE_LOCK);
      // name scenario
      scenario.setName(name);
      scenario.save();
      scenario.removeLock(scLock);
      scLock = null;
    } catch (IloDataException e) {
      e.printStackTrace();
    } finally {
      if (scLock != null) scenario.removeLock(scLock);
    }
    return link;
  }

  // REFERENCE is duplicated and given a new name. 
  // it is created in the given folder
  public static IloScenarioLink duplicateScenario(IloDataService dataService, IloWorkspaceFolder folder, String name,
      IloScenario reference) {
    // Create a scenario
    IloScenarioLink link = null;
    IloScenario scenario = null;
    IloLock scLock = null;
    try {
      // duplicate reference
      link = folder.createChildScenario(-1, reference);
      scenario = link.getScenario();
      scLock = scenario.addLock(IloLockable.EXCLUSIVE_WRITE_LOCK);
      // name scenario
      scenario.setName(name);
      scenario.save();
      scenario.removeLock(scLock);
      scLock = null;
    } catch (IloDataException e) {
      e.printStackTrace();
    } finally {
      if (scLock != null) scenario.removeLock(scLock);
    }
    return link;
  }

       if (item instanceof IloScenarioLink) {
        IloScenarioLink link = (IloScenarioLink) item;
        if (link.getName().equals(name)) return link;
      }
    }
    return null;
  }
 public static IloScenarioLink getScenario(IloWorkspaceFolder folder, String name) {
    for (IloWorkspaceItem item : folder.getChildren()) {

  //--------------------
  // Folder management
  //--------------------

  public static void collectScenarioLinks(IloWorkspaceFolder folder, ArrayList<IloScenarioLink> links, boolean recursive) {
    for (IloWorkspaceItem item : folder.getChildren()) {
      if (item instanceof IloScenarioLink) {
        IloScenarioLink link = (IloScenarioLink) item;
        links.add(link);
      }
      if (item instanceof IloWorkspaceFolder) {
        if (recursive) {
          IloWorkspaceFolder subFolder = (IloWorkspaceFolder) item;
          collectScenarioLinks(subFolder, links, recursive);
        }
      }
    }
  }

  // create a workspace folder in the given parent folder
  public static IloWorkspaceFolder createSubFolder(IloDataService dataService, IloWorkspaceFolder parent,
      String folderName) {
    IloLock referenceLock = null;
    IloWorkspace workspace = parent.getWorkspace();
    try {
      referenceLock = workspace.addLock(IloLockable.USE_LOCK);
      // get or create folder      
      IloWorkspaceFolder folder = getSubFolder(parent, folderName);
      if (folder == null) {
        folder = parent.createChildFolder(0);
        folder.setName(folderName);
      }
      return folder;
    } catch (IloDataException e) {
      e.printStackTrace();
      if (referenceLock != null) workspace.removeLock(referenceLock);
      return null;
    }
  }

  // create a workspace folder in the given workspace
  public static IloWorkspaceFolder createWorkspaceFolder(IloDataService dataService, String workspaceName,
      String folderName) {
    IloLock referenceLock = null;
    IloWorkspace workspace = null;
    try {
      // get current workspace
      workspace = getWorkspace(dataService, workspaceName);
      if (workspace == null) {
        workspace = dataService.createWorkspace();
        referenceLock = workspace.addLock(IloLockable.USE_LOCK);
        workspace.setName(workspaceName);
      } else {
        referenceLock = workspace.addLock(IloLockable.USE_LOCK);
      }

      // get or create folder      
      IloWorkspaceFolder folder = getSubFolder(workspace, folderName);
      if (folder == null) {
        folder = workspace.createChildFolder(0);
        folder.setName(folderName);
      }
      return folder;
    } catch (IloDataException e) {
      e.printStackTrace();
      if (referenceLock != null) workspace.removeLock(referenceLock);
      return null;
    }
  }

  // returns the named workspace
  public static IloWorkspace getWorkspace(IloDataService service, String name) {
    for (IloWorkspace work : service.getWorkspaces()) {
      if (work.getName().equals(name)) return work;
    }
    return null;
  }

  public static IloWorkspaceFolder getRootWorkspaceFolder(IloDataService data, String name) {
    for (IloWorkspace work : data.getWorkspaces()) {
      IloWorkspaceFolder folder = getSubFolder(work, name);
      if (folder != null) return folder;
    }
    return null;
  }

  public static IloWorkspaceFolder getSubFolder(IloWorkspaceFolder parent, String name) {
    for (IloWorkspaceItem item : parent.getChildren()) {
      if (item instanceof IloWorkspaceFolder) {
        IloWorkspaceFolder folder = (IloWorkspaceFolder) item;
        if (folder.getName().equals(name)) return folder;
      }
    }
    return null;
  }

  // returns the scenario's folder
  public static IloWorkspaceFolder getWorkspaceFolder(IloDataService service, IloScenario sc) {
    for (IloWorkspace work : service.getWorkspaces()) {
      IloWorkspaceFolder found = getWorkspaceFolder(work, sc);
      if (found != null) return found;
    }
    return null;
  }

  // return the workspace containing the given scenario
  public static IloWorkspaceFolder getWorkspaceFolder(IloWorkspaceFolder parent, IloScenario sc) {
    for (IloWorkspaceItem item : parent.getChildren()) {
      if (item instanceof IloScenarioLink) {
        IloScenarioLink link = (IloScenarioLink) item;
        if (link.getScenario() == sc) return parent;
      }
      if (item instanceof IloWorkspaceFolder) {
        IloWorkspaceFolder folder = (IloWorkspaceFolder) item;
        IloWorkspaceFolder found = getWorkspaceFolder(folder, sc);
        if (found != null) return found;
      }
    }
    return null;
  }

  // name must be unique in the given folder
  public static String getUniqueName(IloWorkspaceFolder folder, String originalName) {
    int count = 0;
    String name = originalName;
    IloScenarioLink link = getScenario(folder, name);
    while (link != null) {
      count++;
      name = originalName + " (" + count + ")";
      link = getScenario(folder, name);
    }
    return name;
  }

}
 }